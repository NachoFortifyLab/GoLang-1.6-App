# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#################################################################################################################################################
# Fortify lets you build secure software fast with an appsec platform that automates testing throughout the DevSecOps pipeline. Fortify static, #
# dynamic, interactive, and runtime security testing is available on premises or as a service. To learn more about Fortify, start a free trial  #
# or contact our sales team, visit microfocus.com/appsecurity.                                                                                  #
#                                                                                                                                               #
# Use this workflow template as a basis for integrating Fortify on Demand Static Application Security Testing (SAST) into your GitHub workflows.#
# This template demonstrates the steps to check if an application exists in your Fortify On Demand Tenant, create it if it's not exists,        #
# Prepare the code+dependencies, initiate a scan, download results once complete and import into GitHub Security Code Scanning Alerts.          #                                      #
# Existing customers should review inputs and environment variables below to configure scanning against                                         #
# an existing application in your Fortify on Demand tenant. Additional information is available in the comments throughout the workflow, the    #
# documentation for the Fortify actions used, and the Fortify on Demand / ScanCentral Client product documentation. If you need additional      #
# assistance with configuration, feel free to create a help ticket in the Fortify on Demand portal.                                             #
#################################################################################################################################################

name: Fortify On Demand Application and Scan Manager

# TODO: Customize trigger events based on your DevSecOps processes and typical FoD SAST scan time
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  FOD-Application-Management:
    runs-on: ubuntu-latest
    outputs:
      FOD_Release_ID: ${{ steps.FODAppManagement.outputs.releaseID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Checks an application existance in FOD and Creates it if not exist in the Tenant
      id: FODAppManagement
      run: |
          # Sets up your Fortify on Demand API and Github requiered variables
          FOD_API_URL="${{ secrets.FOD_API_URL }}"
          FOD_API_TOKEN="${{ secrets.FOD_BEARER_TOKEN }}"
          Repo_Name="${{ github.event.repository.name }}"
          FOD_USER_ID="${{ secrets.FOD_USER_ID }}"
          FOD_EMAIL="${{ secrets.FOD_EMAIL }}"
          
          # Prints the repository name
          echo "The Repository which triggered the workflow is: ${Repo_Name}"
          
          echo "Proceeding to check if an Application called ${Repo_Name} is present in your Fortify On Demand Tenant..."
          
          # Creates a JSON file to be used as body for the Creation of the Applicaiton Request 
          Create_FOD_Application_Body=$(cat <<EOF
          {
            "applicationName": "$Repo_Name",
            "applicationDescription": "Created by Fortify On Demand Application Manager GitHub workflow",
            "applicationType": "Web_Thick_Client",
            "releaseName": "1.0",
            "releaseDescription": null,
            "emailList": "$FOD_EMAIL",
            "ownerId": $FOD_USER_ID,
            "attributes": [
              {
                "name": "App Lead",
                "id": 8170,
                "value": "$FOD_USER_ID"
              }
           ],
           "businessCriticalityType": "High",
           "sdlcStatusType": "Production",
           "hasMicroservices": false,
           "microservices": [],
           "releaseMicroserviceName": null,
           "userGroupIds": [] 
          }
          EOF
          )
          
          # Echo JSON data to a file named data.json
          echo "$Create_FOD_Application_Body" > body.json
          
          # Sends an API Request with GET method to retrieve an application existance by name and extracts the HTTP status code from the response
          Get_FOD_Application_Request=$(curl -X GET "${FOD_API_URL}/applications?filters=applicationName%3A${Repo_Name}" \
           -H "Authorization: Bearer ${FOD_API_TOKEN}" \
           -H "Accept: application/json" \
           -w "%{http_code}" \
           -o "get-application-output.json") # Saves the results of the query to a file
           
          # Saves the GET request's status code
          Get_Request_Status_Code=$(echo $Get_FOD_Application_Request | tr -d '\n' | sed -e 's/.*Status Code://')
           
          # Checks if the status code of the request is 200 if not it will end the workflow with an error
          if [[ $Get_Request_Status_Code -eq 200 ]]; then
            echo "API Request was successful."
            
            # Prints the status code of the GET Request (Passed Request)
            echo "Status code from the request of getting FOD application: ${Get_Request_Status_Code}"
            
            # Prints the response of the GET Request as a parsed JSON (Passed Request)
            echo "API Request response saved to a JSON file. Showing the results from the query:"
            jq . get-application-output.json
            
            # Extracts the totalcount and items values from the output JSON file
            ITEMS=$(cat "get-application-output.json" | jq -r '.items')
            TOTALCOUNT=$(cat "get-application-output.json" | jq -r '.totalCount')
            
            # Checks if the API Request returns data if not it will create the application and scan it
            if [[ $ITEMS = [] ]] || [[ $TOTALCOUNT -eq 0 ]]; then
              echo "There isn't any Application called ${Repo_Name} found in your Fortify On Demand Tenant"
              
              echo "Proceeding to create an Application for ${Repo_Name} repo in your Fortify On Demand Tenant..."
              
              # Sends an API Request with POST Method to create an application with the Repository Name
              Create_FOD_Application_Request=$(curl -X POST "${FOD_API_URL}/applications" \
                -H "Authorization: Bearer ${FOD_API_TOKEN}" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -w "%{http_code}" \
                -o "create-application-output.json" \
                -d @body.json)
                
              # Saves the POST request's status code
              Create_Request_Status_Code=$(echo $Create_FOD_Application_Request | tr -d '\n' | sed -e 's/.*Status Code://')
           
              # Prints the status code of the POST Request
              echo "Status code from the request of creation a FOD application: ${Create_Request_Status_Code}"
              
              if [[ $Create_Request_Status_Code -eq 201 ]]; then
                echo "API Request was successful."
                
                echo "Your application ${Repo_Name} has been created in your Fortify On Demand Tenant."
                
                # Prints the status code of the POST Request (Passed Request)
                echo "Status code from the request of creation a FOD application: ${Create_Request_Status_Code}"
                
                # Prints the response of the POST Request as a parsed JSON (Passed Request)
                echo "API Request response saved to a JSON file. Showing the results from the query:"
                jq . create-application-output.json
                
                # Extracts the releaseid value from the output JSON file of the Application Creation Request
                FOD_Release_ID=$(cat "create-application-output.json" | jq -r '.releaseId')
                echo "::set-output name=releaseID::$FOD_Release_ID" # Saves the releaseid as the output of the current job to be used in next jobs
              else
                echo "API Request has failed. FOD API server is down or your Token has expired or please check the POST Request"
                # Prints the status code of the POST Request (Failed Request)
                echo "Status code from the request of creation a FOD application: ${Create_Request_Status_Code}"
                
                # Prints the response of the POST Request as a parsed JSON (Failed Request)
                echo "API Request response saved to a JSON file, please check the errors and fix the issue if needed:"
                jq . create-application-output.json
                
                exit 1  # Exit with a non-zero status code to indicate failure
              fi
            else
              echo "API Request was successful."
              
              echo "${Repo_Name} is present in your Fortify On Demand Tenant as an Application."
              
              # Extracts the releaseid value from the output JSON file of the Application Creation Request
              FOD_Release_ID=$(cat "create-application-output.json" | jq -r '.releaseId')
              echo "::set-output name=releaseID::$FOD_Release_ID" # Saves the releaseid as the output of the current job for following jobs

              echo "Release Id: ${FOD_Release_ID}"
            fi
          else
            echo "API Request has failed. FOD API server is down or your Token has expired."
            
            # Prints the status code of the GET Request (Failed Request)
            echo "Status code from the request of getting FOD application: ${Get_Request_Status_Code}"
            
            # Prints the response of the GET Request as a parsed JSON (Failed Request)
            echo "API Request response saved to a JSON file, please check the errors and fix the issue if needed:"
            jq . get-application-output.json
            
            exit 1  # Exit with a non-zero status code to indicate failure
          fi
          
  FOD-SAST-Scan:
    # Use the appropriate runner for building your source code.
    # TODO: Use a Windows runner for .NET projects that use msbuild. Additional changes to RUN commands will be required to switch to Windows syntax.
    runs-on: ubuntu-latest
    needs: FOD-Application-Management
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v3

      # Java is required to run the various Fortify utilities.
      # When scanning a Java application, please use the appropriate Java version for building your application.
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'temurin'

      # Prepare source+dependencies for upload. The default example is for a Maven project that uses pom.xml.
      # TODO: Update PACKAGE_OPTS based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
      #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
      #   ScanCentral Client can download dependencies for msbuild projects (-bt msbuild); however, you must convert the workflow to use a Windows runner.
      #   ScanCentral has additional options that should be set for PHP and Python projects
      #   For other build tools, add your build commands to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
      #   ScanCentral Client documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/
      - name: Download Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@5b7382f8234fb9840958c49d5f32ae854115f9f3
      - name: Package Code + Dependencies
        run: scancentral package $PACKAGE_OPTS -o package.zip
        env:
          PACKAGE_OPTS: "-bt none"

      # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
      # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
      #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
      #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
      - name: Download Fortify on Demand Universal CI Tool
        uses: fortify/gha-setup-fod-uploader@6e6bb8a33cb476e240929fa8ebc739ff110e7433
      - name: Perform a FOD SAST Scan on the FOD Application assigned to the Repo
        run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
        env:
          FOD_URL: "${{ secrets.FOD_URL }}"
          FOD_API_URL: "${{ secrets.FOD_API_BASE_URL }}"
          FOD_TENANT: ${{ secrets.FOD_TENANT }}
          FOD_USER: ${{ secrets.FOD_USER }}
          FOD_PAT: ${{ secrets.FOD_PAT }}
          FOD_RELEASE_ID: ${{ needs.FOD-Application-Management.outputs.FOD_Release_ID }}
          FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
          FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

      # Once scan completes, pull SAST issues from Fortify on Demand and generate SARIF output.
      - name: Export results to GitHub-optimized SARIF
        uses: fortify/gha-export-vulnerabilities@fcb374411cff9809028c911dabb8b57dbdae623b
        with:
          fod_base_url: "${{ secrets.FOD_URL }}"
          fod_tenant: ${{ secrets.FOD_TENANT }}
          fod_user: ${{ secrets.FOD_USER }}
          fod_password: ${{ secrets.FOD_PAT }}
          fod_release_id: ${{ needs.FOD-Application-Management.outputs.FOD_Release_ID }}
          
      # Import Fortify on Demand results to GitHub Security Code Scanning
      - name: Import Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif
