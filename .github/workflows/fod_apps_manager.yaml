name: Fortify On Demand Application Manager

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  fod-application-management:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Checks an application existance in FOD and Creates it if not exist in the Tenant
      run: |
          # Sets up your Fortify on Demand API and Github requiered variables
          FOD_API_URL="${{ secrets.FOD_API_URL }}"
          FOD_API_TOKEN="${{ secrets.FOD_BEARER_TOKEN }}"
          Repo_Name="${{ github.event.repository.name }}"
          FOD_USER_ID="${{ secrets.FOD_USER_ID }}"
          FOD_EMAIL="${{ secrets.FOD_EMAIL }}"

          # Prints the repository name
          echo "The Repository which triggered the workflow is: ${Repo_Name}"

          # Creates a JSON file to be used as body for the Creation of the Applicaiton Request 
          Create_FOD_Application_Body=$(cat <<EOF
          {
            "name": "John Doe",
            "age": 30,
            "city": "Example City"
          }
          EOF
          )

          # Echo JSON data to a file named data.json
          echo "$Create_FOD_Application_Body" > body.json

          # Prints the parsed data of the JSON file that would be the body of the POST Request
          jq . body.json
          
          # Sends an API Request with GET method to retrieve an application existance by name and extracts the HTTP status code from the response
          Get_FOD_Application_Request=$(curl -X GET "${FOD_API_URL}/applications?filters=applicationName%3A${Repo_Name}" \
           -H "Authorization: Bearer ${FOD_API_TOKEN}" \
           -H "Accept: application/json" \
           -w "%{http_code}" \
           -o "get-application-output.json") # Saves the results of the query to a file
           
          # Saves the GET request's status code
          Get_Request_Status_Code=$(echo $Get_FOD_Application_Request | tr -d '\n' | sed -e 's/.*Status Code://')
           
          # Prints the status code of the Request
          echo "Status code from the request of getting FOD application: ${Get_Request_Status_Code}"
          
          # Prints the response of the GET Request as a parsed JSON
          echo "API Request response saved to a JSON file. Showing all results from the query:"
          jq . get-application-output.json

          # Extracts the totalcount and items values from the output JSON file
          ITEMS=$(cat "get-application-output.json" | jq -r '.items')
          TOTALCOUNT=$(cat "get-application-output.json" | jq -r '.totalCount')

          # Checks if the status code of the request is 200 if not it will end the workflow with an error
          if [[ $Get_Request_Status_Code -eq 200 ]]; then
            echo "API Request was successful."
            
            # Checks if the API Request returns sth if not it will create the application and scan it
            if [[ $ITEMS = [] ]] || [[ $TOTALCOUNT -eq 0 ]]; then
              echo "There isn't any Application called ${Repo_Name} found in your Fortify On Demand Tenant"
              
              
                
              # Saves the POST request's status code
              Create_Request_Status_Code=$(echo $Create_FOD_Application_Request | tr -d '\n' | sed -e 's/.*Status Code://')
           
              # Prints the status code of the Request
              echo "Status code from the request of creation a FOD application: ${Create_Request_Status_Code}"
          
              # Parses and Prints the response of the request
              echo "API Request response saved to a JSON file. Showing all results from the query:"
              jq . create-application-output.json
              echo "Your application ${Repo_Name} has been created in your Fortify On Demand Tenant"
            else
              echo "Application ${Repo_Name} is present in your Fortify On Demand Tenant"
            fi
          else
            echo "API request failed. FOD API server is down or your Token has expired"
            echo "Status code from the api request: ${Request_Status_Code}"
            exit 1  # Exit with a non-zero status code to indicate failure
          fi
